# -*- coding: utf-8 -*-
"""Income Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CY67UgaQB2AV6QT8DLqN4hpZ-XhFDoZX
"""

import numpy as np
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

"""**DATA**"""

data = pd.read_csv("INCOME.csv")
dataincome = data.loc[: , ['Date', 'Date code', 'Total Sells', 'Total Cost', 'Income']].to_numpy()
dataincome_x = dataincome[: , 1:4]
dataincome_y = dataincome[: , 4]
dataincome_x_train , dataincome_x_test , dataincome_y_train , dataincome_y_test = train_test_split(dataincome_x , dataincome_y)

"""**Data TRAINING**"""

reg = LinearRegression( n_jobs=4)
reg.fit(dataincome_x_train , dataincome_y_train)
dataincome_y_pred = reg.predict(dataincome_x_test)
mean_squared_error(dataincome_y_test , dataincome_y_pred)

"""**INPPUT1**"""

m = len(dataincome[: , 0])
x = dataincome[m-1 , 1]
date = dataincome[x-1 , 0]
income_f30days_1 = dataincome[x-15:x, 1:4]
income_f30days_2 = dataincome[x-45:x+15-45,1:4]
income_f30days = np.concatenate((income_f30days_1 , income_f30days_2))
np.random.shuffle(income_f30days)

"""**PREDICTION**"""

income_f30days_prediction= reg.predict(income_f30days)

"""**OUTPUT**"""

save_as_csv_of_30days_1 = np.array([
    pd.date_range(start = date, periods=30).to_numpy(dtype=object) ,
    income_f30days_prediction,
]).T
save_as_csv_of_30days_2 = np.array([
    dataincome[x-20:x, 0],
    dataincome[x-20:x, 4],
]).T
save_as_csv_of_30days = np.concatenate((save_as_csv_of_30days_2 , save_as_csv_of_30days_1))
save_as_csv_of_30days_pd = pd.DataFrame({
    'Date':save_as_csv_of_30days[: , 0],
    'Income' : save_as_csv_of_30days[: , 1],
    
})
save_as_csv_of_30days_pd.to_csv("30Days Income Prediction.csv")

"""**PLOTING**"""

import matplotlib.pyplot as plt 
plotdata = pd.read_csv("30Days Income Prediction.csv")
income_x = plotdata.iloc[: , 1] 
income_y = plotdata.iloc[: , 2] 
income_date_x = dataincome[x-1 , 0]
income_date_y = dataincome[x-1 , 4]
plt.plot(income_x ,income_y)
plt.scatter(income_date_x , income_date_y)