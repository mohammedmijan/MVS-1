# -*- coding: utf-8 -*-
"""sellprice productwise.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_oP0m3aKS9paHqVQ3NhwsJIQQrJnJB1I

**MODULES**
"""

import pandas as pd
import numpy as np
from sklearn.neural_network import MLPRegressor , MLPClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix , precision_score , recall_score , mean_squared_error , f1_score

"""**PRICING DATA**"""

data1 = pd.read_csv("daywiseproduct.csv")
data = data.loc[: , ['Date', 'product code', 'product sell piece', 'buy per piece',
       'sell per piece', 'profit in %', 'invest point', 'stocks',
       'influencity', 'Total SELLS', 'Total Costs']]
data_pricing = data.loc[: , ["product code","product sell piece","buy per piece" ,"profit in %","sell per piece"]]
datapricing = data_pricing.to_numpy()
datapricing_percentage_x = datapricing[: , :3]
datapricing_percentage_y = datapricing[: , 3]
reg1 = MLPRegressor(hidden_layer_sizes=(150,) ,solver="sgd" , tol=0.01 , max_iter=250 ,activation='logistic',momentum=.95)
reg1.fit(datapricing_percentage_x , datapricing_percentage_y)
before_data_pricingpercentage = reg1.predict(datapricing_percentage_x)
datapricing_x = np.column_stack((datapricing_percentage_x ,before_data_pricingpercentage))
#datapricing_x = datapricing[: , :4]
datapricing_y = datapricing[: , 4]
datapricing_percentage_x_train , datapricing_percentage_x_test , datapricing_percentage_y_train ,datapricing_percentage_y_test = train_test_split(datapricing_percentage_x , datapricing_percentage_y)
datapricing_x_train , datapricing_x_test , datapricing_y_train , datapricing_y_test = train_test_split(datapricing_x , datapricing_y)

"""**PRICING TRAINING**"""

reg1.fit(datapricing_percentage_x_train ,datapricing_percentage_y_train )
datapricing_percentage_y_pred = reg1.predict(datapricing_percentage_x_test)
reg2 = MLPRegressor(hidden_layer_sizes=(550,),solver='lbfgs' , tol=0.01 , activation='logistic' ,max_iter=250 , momentum=.95 )
reg2.fit(datapricing_x_train , datapricing_y_train)
datapricing_y_pred = reg2.predict(datapricing_x_test)
print(mean_squared_error(datapricing_percentage_y_test , datapricing_percentage_y_pred) , mean_squared_error(datapricing_y_test , datapricing_y_pred))

"""**INFLUENCITY DATA**"""

influence_data = data.loc[: , ["product code", "stocks","product sell piece","influencity"]]
influencedata = influence_data.to_numpy()
influencedata_x = influencedata[: , :3]
influencedata_y = influencedata[: , 3]
influencedata_x_train , influencedata_x_test , influencedata_y_train , influencedata_y_test = train_test_split(influencedata_x , influencedata_y)

"""**INFLUENCITY TRAINING**"""

reg3 = MLPRegressor(hidden_layer_sizes=(200,) , solver="lbfgs" , activation="logistic" , tol=0.1)
reg3.fit(influencedata_x_train , influencedata_y_train)
influencedata_y_pred = reg3.predict(influencedata_x_test)
mean_squared_error(influencedata_y_test , influencedata_y_pred)

"""**INVEST DATA**"""

invest_data = data.loc[: , ["product code", 'product sell piece', 'buy per piece', 'sell per piece' , 'invest point']]
investdata = invest_data.to_numpy()
investdata_x = investdata[: , :4]
investdata_y = investdata[: , 4]
investdata_x_train , investdata_x_test , investdata_y_train , investdata_y_test  = train_test_split(investdata_x , investdata_y)

"""**INVEST TRAINING**"""

clf1 = MLPClassifier(hidden_layer_sizes=(200,) , solver="sgd" , activation="logistic" ,max_iter=400)
clf1.fit(investdata_x_train ,investdata_y_train)
investdata_y_pred = clf1.predict(investdata_x_test)
print(
confusion_matrix(investdata_y_test , investdata_y_pred) ,
precision_score(investdata_y_test , investdata_y_pred , average="micro") ,
recall_score(investdata_y_test , investdata_y_pred ,average="micro") , 
f1_score(investdata_y_test , investdata_y_pred ,average="micro")
)

"""**INPUT DATA**"""

m = len(datapricing[: , 0])
x = int(datapricing[m-1 , 0])
pricepercntage_f30days_1 = data.loc[x-15:x, ["product code" ,'product sell piece', 'buy per piece']].to_numpy(dtype = float)
price_f30days_1= data.loc[x-15:x, ['product code', 'product sell piece', 'buy per piece',"profit in %"]].to_numpy(dtype = float)
investing_point_f30days_1 = data.loc[x-15:x, ['product code', 'product sell piece', 'buy per piece', 'sell per piece']].to_numpy(dtype = int)
STOCKS_f30days_1 = data.loc[x-15:x, ['product code', 'stocks', 'product sell piece']].to_numpy(dtype = float)
pricepercntage_f30days_2 = data.loc[x-45:x+15-45, ['product code', 'stocks', 'product sell piece']].to_numpy(dtype = float)
price_f30days_2= data.loc[x-45 :x+15-45, ['product code', 'product sell piece', 'buy per piece', 'profit in %']].to_numpy(dtype = float)
investing_point_f30days_2 = data.loc[x-45:x+15-45, ['product code', 'product sell piece', 'buy per piece', 'sell per piece']].to_numpy(dtype = int)
STOCKS_f30days_2 = data.loc[x-45:x+15-45, ['product code', 'stocks', 'product sell piece']].to_numpy(dtype = float)

pricepercntage_f30days = np.concatenate((pricepercntage_f30days_1 , pricepercntage_f30days_2))
price_f30days = np.concatenate((price_f30days_1,price_f30days_2))
investing_point_f30days = np.concatenate((investing_point_f30days_1, investing_point_f30days_2))
STOCKS_f30days = np.concatenate((STOCKS_f30days_1 ,STOCKS_f30days_2))

np.random.shuffle(pricepercntage_f30days)
np.random.shuffle(price_f30days)
np.random.shuffle(investing_point_f30days)
np.random.shuffle(STOCKS_f30days)

"""**PREDICTION1**"""

prediction_of_price_percent_f30days = reg1.predict(pricepercntage_f30days)
prediction_of_price_f30days = reg2.predict(price_f30days)
prediction_of_influence_f30days = reg3.predict(STOCKS_f30days)
Invest_prediction_f30days =clf1.predict(investing_point_f30days)

"""**PREDICTION2**"""

Day_code = x
P_S_Peice = data.iloc[x-1 ,1]
P_B_Price = data.iloc[x-1 ,2]
STOCKS_ = data.iloc[x-1 ,6]



prediction_of_price_percent = reg1.predict([[Day_code ,P_S_Peice , P_B_Price]])
prediction_of_price = reg2.predict([[Day_code ,P_S_Peice , P_B_Price , prediction_of_price_percent]])
prediction_of_influence = reg3.predict([[Day_code , STOCKS_ ,P_S_Peice]])
Invest_prediction =clf1.predict([[Day_code ,P_S_Peice , P_B_Price , prediction_of_price]])

"""**output DATA**"""

date = data.iloc[x-1 , 0]
save_as_csv_of_30days_1 = np.row_stack([
    pd.date_range(start = date, periods=31).to_numpy(dtype=object) ,
    prediction_of_price_f30days,
    prediction_of_price_percent_f30days,
    Invest_prediction_f30days,
    prediction_of_influence_f30days
] ).T
save_as_csv_of_30days_2 = np.array([
    data.iloc[x-15:x, 0].to_numpy(),
    data.iloc[x-15:x, 4].to_numpy(dtype=float),
    data.iloc[x-15:x, 5].to_numpy(dtype=float),
    data.iloc[x-15:x, 6].to_numpy(dtype=float),
    data.iloc[x-15:x, 8].to_numpy(dtype=float)
] ).T
save_as_csv_of_30days = np.concatenate((save_as_csv_of_30days_2 , save_as_csv_of_30days_1))
save_as_csv_of_30days_pd = pd.DataFrame({
    'Date':save_as_csv_of_30days[: , 0],
    'Sell Price' : save_as_csv_of_30days[: , 1],
    'Profit in Percentage' : save_as_csv_of_30days[: ,  2],
    'Investing Point' : save_as_csv_of_30days[: , 3],
    'Influencity' : save_as_csv_of_30days[: , 4] ,
})
save_as_csv_of_30days_pd.to_csv("30Days Data Day Wise each Product.csv")


